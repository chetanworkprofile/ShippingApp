@page "/changePassword"

@attribute [Authorize(Roles = "admin,client,manager,deliveryBoy")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
            <h4 class="card-header">Change Password</h4>
            <div class="card-body">
                <EditForm Model="changePassModel" OnSubmit="DoChange">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="oldPassword">Old Password</label>
                        <InputText id="oldPassword" type="password" class="form-control" @bind-Value="changePassModel.oldPassword" required />
                        <ValidationMessage For="@(()=>changePassModel.oldPassword)" />
                    </div>
                    <div class="form-group">
                        <label for="newPassword">New Password</label>
                        <InputText id="newPassword" type="password" class="form-control" @bind-Value="changePassModel.newPassword" required />
                        <ValidationMessage For="@(()=>changePassModel.newPassword)" />
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Confirm New Password</label>
                        <InputText id="confirmNewPassword" type="Password" class="form-control" @bind-Value="this.confirmPassword" required />
                    </div>

                    <div class="my-2">
                        <button disabled="@loading" type="submit" class="btn btn-primary">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                Task.Delay(5000);
                                loading = false;
                            }
                            Change Password
                        </button>
                    </div>
                    
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view/edit this content.</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    ChangePasswordModel  changePassModel = new();
    LoginResponse resetResponse = new();
    string confirmPassword = string.Empty;
    [Inject] ISnackbar Snackbar { get; set; }

    private bool loading;

    async Task DoChange()
    {
        loading = true;
        try
        {
            if (changePassModel.newPassword == null || changePassModel.newPassword == "")
            {
                //resetResponse.message = "Please fill required fields";
                Snackbar.Add("Please Fill required fields", Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                loading = false;
                return;
            }
            if (confirmPassword != changePassModel.newPassword)
            {
                //resetResponse.message = "Password and Confirm Password does not match...";
                Snackbar.Add("Password and confirm Password does not match ...", Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                loading = false;
                return;
            }
            resetResponse = await _authService.ChangePassword(changePassModel);
            if (resetResponse.statusCode == 200)
            {
                //AlertService.Success("Password Change successful", keepAfterRouteChange: true);
                Snackbar.Add("Password change Successful", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                _navMgr.NavigateTo("/");
            }
            else
            {
                Snackbar.Add(resetResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}