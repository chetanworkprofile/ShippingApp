@page "/forgetPassword"
@using ShippingClient.Models;
@using ShippingClient.Services.Contracts;
@inject IAuthenticationService _authService;
@inject NavigationManager _navMgr;
@inject IAlertService AlertService

<div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
    <h4 class="card-header">Forget Password</h4>
    <div class="card-body">
        <EditForm Model="this.email" OnSubmit="DoForget">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText class="form-control" @bind-Value="loginModel.email" />
                <ValidationMessage For="@(()=>loginModel.email)" />
            </div>

            <div class="my-2">
                @forgetResponse.message
            </div>

            <div class="my-2">
                <button disabled="@loading" type="submit" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                        Task.Delay(5000);
                        loading = false;
                    }
                    Send OTP
                </button>
            </div>
            <p>Don't have a account?</p><NavLink href="/register" class="btn btn-link">Register</NavLink>
            <NavLink href="/login" class="btn btn-link"></NavLink>
        </EditForm>
        <p>We will send you OTP on your email which will be valid for 1 hour</p>
    </div>
</div>


@code {
    LoginDTO loginModel = new();
    string email = string.Empty;
    LoginResponse forgetResponse = new();
    private bool loading;

    async Task DoForget()
    {
        email = loginModel.email;
        // reset alerts on submit
        AlertService.Clear();
        loading = true;
        try
        {
            forgetResponse.message = "Wait....";
            forgetResponse = await _authService.ForgetPassword(email);
            if (forgetResponse.statusCode != 0)
            {
                //AlertService.Success("Verification Email Sent successful", keepAfterRouteChange: true);
                _navMgr.NavigateTo("/resetPassword", true);
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}