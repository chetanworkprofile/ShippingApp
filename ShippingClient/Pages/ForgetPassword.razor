@page "/forgetPassword"

<PageTitle>Shipment App</PageTitle>

<div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
    <h4 class="card-header">Forget Password</h4>
    <div class="card-body">
        <EditForm Model="loginModel" OnValidSubmit="DoForget">
            <DataAnnotationsValidator />
            @*<div class="form-group">
                <label for="email">Email</label>
                <InputText class="form-control" @bind-Value="loginModel.email" />
                <ValidationMessage For="@(()=>loginModel.email)" />
            </div>

            <div class="my-2">
                @forgetResponse.message
            </div>

            <div class="my-2">
                <button disabled="@loading" type="submit" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                        Task.Delay(5000);
                        loading = false;
                    }
                    Send OTP
                </button>
            </div>
            <p>Don't have a account?</p><NavLink href="/register" class="btn btn-link">Register</NavLink>
            <NavLink href="/login" class="btn btn-link"></NavLink>*@
            <MudCard>
                <MudForm @ref="form" ReadOnly="false" @onkeydown="@HandleKeyDown">
                    <MudCardContent>
                        <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @bind-Value=loginModel.email
                                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                    </MudCardContent>
                    <MudCardActions>
                        <div class="d-flex align-center justify-space-between">
                            <MudButton tabindex="0" Variant="Variant.Filled" Color="Color.Primary" Class="align-content-center m-lg-2" disabled="@loading" OnClick="DoForget">
                                @if (loading)
                                {
                                    Task.Delay(5000);
                                    loading = false;
                                }
                                Get OTP
                            </MudButton>
                            <MudProgressCircular Color="Color.Primary" Indeterminate="loading" />
                        </div>
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Default" Class="align-content-center m-lg-2" disabled="@loading" Href="/login">Login</MudButton>
                        </div>
                    </MudCardActions>
                </MudForm>
                <MudCardContent>
                    <div class="row"><p>Don't have a account?</p></div>
                    <div class="d-flex align-center"><MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="align-content-center m-lg-2" disabled="@loading" Href="/register">Register</MudButton></div>
                </MudCardContent>
            </MudCard>
        </EditForm>
        <MudAlert Severity="Severity.Normal"><p>We will send you OTP on your email which will be valid for 1 hour</p></MudAlert>
    </div>
</div>


@code {
    MudForm? form;
    LoginDTO loginModel = new();
    string email = string.Empty;
    LoginResponse forgetResponse = new();
    [Inject] ISnackbar Snackbar { get; set; }
    private bool loading;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await DoForget();
        }
    }

    async Task DoForget()
    {
        email = loginModel.email;
        loginModel.password = "";
        await form.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Please Fill Email", Severity.Error);
            return;
        }
        
        // reset alerts on submit
        Snackbar.Clear();
        loading = true;
        try
        {
            forgetResponse.message = "Wait....";
            forgetResponse = await _authService.ForgetPassword(email);
            if (forgetResponse.statusCode != 0)
            {
                Snackbar.Add(forgetResponse.message, Severity.Success);
                _navMgr.NavigateTo("/resetPassword", true);
            }
            Snackbar.Add(forgetResponse.message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}