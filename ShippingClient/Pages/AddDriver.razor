@page "/addDriver"

@attribute [Authorize(Roles = "admin")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div class="card col-sm-6" style="margin: 2% auto; justify-content:center">
            <h4 class="card-header">Add New Driver</h4>
            <div class="card-body">
                <EditForm Model="driverModel" OnValidSubmit="DoAddDriver">
                    <DataAnnotationsValidator />
                     <div class="form-group">
                       <label for="firstName">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="driverModel.firstName" />
                        <ValidationMessage For="@(()=>driverModel.firstName)" />
                    </div>

                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="driverModel.lastName" />
                        <ValidationMessage For="@(()=>driverModel.lastName)" />
                    </div>

                     <div class="form-group">
                       <label for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="driverModel.email" />
                        <ValidationMessage For="@(()=>driverModel.email)" />
                    </div>

                    <div class="form-group">
                        <label for="contact">Contact No.</label>
                        <InputNumber id="contact" class="form-control" @bind-Value="driverModel.contactno" />
                        <ValidationMessage For="@(()=>driverModel.contactno)" />
                    </div>

                    <div class="form-group">
                        <label for="address">Address</label>
                        <InputText type="address" class="form-control" @bind-Value="driverModel.address" />
                        <ValidationMessage For="@(()=>driverModel.address)" />
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <label for="checkpointLocation" class="control-label">Current Checkpoint</label>
                        </div>
                    </div>

                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <select class="form-control" onchange="@CheckpointClicked">
                                <option value="">-- Select Checkpoint --</option>
                                @foreach (var origin in checkpointsList)
                                {
                                    <option value="@origin.checkpointId">@origin.checkpointName</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="isAvailable">Is Available (not busy)?</label>
                        <input type="radio" checked="@(isAvailable == true)"
                               name="isAvailable" @onchange="@(() => isAvailable = true)" />
                        <label>Yes</label>

                        <input type="radio" checked="@(isAvailable == false)"
                               name="isAvailable" @onchange="@(() => isAvailable = false)" />
                        <label>No</label>
                    </div>

                    <div class="my-2">
                        <button disabled="@loading" type="submit" class="btn btn-primary">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                Task.Delay(5000);
                                loading = false;
                            }
                            Add
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    Models.AddDriver driverModel = new();
    GlobalResponse addDriverResponse = new();
    private bool loading;
    private bool isAvailable = true;

    Guid checkPoint;
    [Inject] ISnackbar Snackbar { get; set; }

    List<Checkpoints> checkpointsList = new List<Checkpoints>();

    protected override async void OnInitialized()
    {
        GlobalResponse res = await _apiService.GetCheckpoints();
        var obj = JsonSerializer.Serialize(res.data);
        checkpointsList = JsonSerializer.Deserialize<List<Checkpoints>>(obj);
        driverModel.url = string.Empty;
        driverModel.url = "driverSetPassword";
        StateHasChanged();
    }

    void CheckpointClicked(ChangeEventArgs originEvent)
    {
        checkPoint = new Guid(originEvent.Value!.ToString()!);
        this.StateHasChanged();
    }

    async Task DoAddDriver()
    {
        loading = true;
        driverModel.checkpointLocation = checkPoint;
        driverModel.isAvailable = isAvailable;
        try
        {
            addDriverResponse = await _apiService.AddDriver(driverModel);
            if (addDriverResponse.statusCode == 401)
            {
                _navMgr.NavigateTo("/logout");
                return;
            }
            if (addDriverResponse.statusCode == 200)
            {
                Snackbar.Add("Driver Added Successfully", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
            else
            {
                Snackbar.Add(addDriverResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }


    //if (confirmPassword != driverModel.password)
    //{
    //    //addDriverResponse.message = "Password and Confirm Password does not match...";
    //    Snackbar.Add("Password and Confirme Password does not match..", Severity.Error, config =>
    //    {
    //        config.Icon = Icons.Material.Filled.Error;
    //        config.IconColor = Color.Warning;
    //        config.IconSize = Size.Small;
    //    });
    //    loading = false;
    //    return;
    //}
}





@*<div class="form-group">
    <label for="password">Password</label>
    <InputText id="password" type="password" class="form-control" @bind-Value="driverModel.password" />
    <ValidationMessage For="@(()=>driverModel.password)" />
</div>
<div class="form-group">
    <label for="confirmPassword">Confirm Password</label>
    <InputText id="confirmPassword" type="Password" class="form-control" @bind-Value="confirmPassword" />
</div>*@

