@page "/profile"
<h3>My Profile</h3>

<AuthorizeView>
	<Authorized Context="auth">
		<MudPaper Height="100%" Width="100%" Style="background: #594AE2">
			<MudContainer Fixed="true">
				<MudGrid Spacing="1">
					<MudItem xs="12" md="4" lg="4" xl="4">
						<MudPaper Class="pa-16 ma-4">
							<div class="d-flex flex-column align-items-center text-center" style=" height: 260px">
								<MudAvatar Color="Color.Surface" Style="height:120px; width: 120px; background:; font-size:3rem">@userModel.firstName.ToList().FirstOrDefault()</MudAvatar>
								<div class="mt-3">
									<h4 class="text-secondary mb-1"><b>@userModel.firstName @userModel.lastName</b></h4>
									<p class="text-secondary mb-1">Role : @userModel.userRole</p>
									<p class="text-muted font-size-sm">Joined on : @userModel.createdAt</p>
									<p></p>
									@*<MudButton Variant="Variant.Filled" Style="background:#EC407A; color:white">Update Profile</MudButton>*@
								</div>
							</div>
						</MudPaper>
					</MudItem>
					<MudItem xs="12" md="8" lg="8" xl="8">
						<MudPaper Class="pa-16 ma-4">
							<EditForm Model="userModel" class="disabled">
								<div style=" height: 260px">
									<div class="row mb-1">
										<div class="col-sm-3">
											<h6 class="mt-3">First Name</h6>
										</div>
										<div class="col-sm-9 text-secondary">
											<MudTextField @bind-Value="userModel.firstName" Variant="Variant.Outlined" Disabled="@isDisabled" Margin="Margin.Dense" />
										</div>
									</div>
									<div class="row mb-1">
										<div class="col-sm-3">
											<h6 class="mt-3">Last Name</h6>
										</div>
										<div class="col-sm-9 text-secondary">
											<MudTextField @bind-Value="userModel.lastName" Variant="Variant.Outlined" Disabled="@isDisabled" Margin="Margin.Dense" />
										</div>
									</div>
									<div class="row mb-1">
										<div class="col-sm-3">
											<h6 class="mt-3">Email</h6>
										</div>
										<div class="col-sm-9 text-secondary">
											<MudTextField @bind-Value="userModel.email" Variant="Variant.Outlined" Disabled="@isDisabled" Margin="Margin.Dense" />
										</div>
									</div>
									<div class="row mb-1">
										<div class="col-sm-3">
											<h6 class="mt-3">Contact No</h6>
										</div>
										<div class="col-sm-9 text-secondary">
											<MudTextField @bind-Value="userModel.contactNo" Variant="Variant.Outlined" Disabled="@isDisabled" Margin="Margin.Dense" />
										</div>
									</div>
									<div class="row mb-1">
										<div class="col-sm-3">
											<h6 class="mt-3">Address</h6>
										</div>
										<div class="col-sm-9 text-secondary">
											<MudTextField @bind-Value="userModel.address" Variant="Variant.Outlined" Disabled="@isDisabled" Margin="Margin.Dense" />
										</div>
									</div>
								<div class="row">
									<div class="col-sm-3"></div>
									<div class="col-sm-9 text-secondary">
										<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@Edit">@buttonText</MudButton>
										<MudButton Variant="Variant.Filled" Disabled="@(isDisabled || loading)" Color="Color.Success" OnClick="() => Update()">
												@if (loading)
												{
													<span class="spinner-border spinner-border-sm mr-1"></span>
													Task.Delay(5000);
													loading = false;
												}
												Save Changes
										</MudButton>
									</div>
								</div>
							</div>
							</EditForm>
						</MudPaper>
					</MudItem>
				</MudGrid>
			</MudContainer>
		</MudPaper>
	</Authorized>
	<NotAuthorized>
		<p>You are not authorized</p>
		@if (true)
		{
			_navMgr.NavigateTo("/login");
		}
	</NotAuthorized>
</AuthorizeView>
@*
<MudPaper Height="100%" Width="100%" Style="background: #594AE2">
	<MudContainer Class="mt-4">
		<MudGrid Container="true" Spacing="2">
			<MudItem xs="12" md="6" lg="3" xl="3">
				<MudPaper Elevation="4" Class="p-3 text-center">
					<MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Large" Class="mb-3" />
					<div class="mb-1">Total Earnings : 23</div>
					<MudButton Color="Color.Secondary">View Details</MudButton>
				</MudPaper>
			</MudItem>
			<MudItem xs="12" md="6" lg="3" xl="3">
				<MudPaper Elevation="4" Class="p-3 text-center">
					<MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Large" Class="mb-3" />
					<div class="mb-1">This Month's Earning Earnings : 23</div>
					<MudButton Color="Color.Secondary">View Details</MudButton>
				</MudPaper>
			</MudItem>
			<MudItem xs="12" md="6" lg="3" xl="3">
				<MudPaper Elevation="4" Class="p-3 text-center">
					<MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Large" Class="mb-3" />
					<div class="mb-1">Today's Earnings : 23</div>
					<MudButton Color="Color.Secondary">View Details</MudButton>
				</MudPaper>
			</MudItem>
			<MudItem xs="12" md="6" lg="3" xl="3">
				<MudPaper Elevation="4" Class="p-3 text-center">
					<MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Class="mb-3" />
					<div class="mb-1">Total Trips : 23</div>
					<MudButton Color="Color.Secondary">View Details</MudButton>
				</MudPaper>
			</MudItem>
		</MudGrid>
	</MudContainer>
</MudPaper>*@


@code {
	//private decimal thisMonthEarnings = 1050.25m;
	//private decimal todaysEarnings = 40.7m;
	//private decimal growthRate = 12.5m;
	//public decimal distance = 0;
	Models.ResponseUser userModel = new();
	GetYourselfResponse getUserResponse = new();
	GlobalResponse globalResponse = new();
	private bool loading = false;
	[Inject] ISnackbar Snackbar { get; set; }
	public bool isDisabled = true;
	public string buttonText = "Edit";

	protected override async Task OnInitializedAsync()
	{
		getUserResponse = await _apiService.GetYourself();
		userModel = getUserResponse.data;
		StateHasChanged();
	}
	public void Edit()
	{
		if (isDisabled)
		{
			isDisabled = false;
			buttonText = "Cancel";
		}
		else
		{
			isDisabled = true;
			buttonText = "Edit";
		}
		StateHasChanged();
	}

	public async Task Update()
	{
		loading = true;
		UpdateUser user = new UpdateUser(userModel);
		globalResponse = await _apiService.UpdateUser(user);
		if (globalResponse.statusCode == 200)
		{
			Snackbar.Add("User updated successfully", Severity.Success, config =>
			{
				config.Icon = Icons.Material.Filled.Done;
				config.IconColor = Color.Warning;
				config.IconSize = Size.Small;
			});
		}
		else
		{
			Snackbar.Add(globalResponse.message, Severity.Error, config =>
			{
				config.Icon = Icons.Material.Filled.Error;
				config.IconColor = Color.Warning;
				config.IconSize = Size.Small;
			});
		}
		Edit();
	}
}