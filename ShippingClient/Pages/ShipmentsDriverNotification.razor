@page "/driverGetNotification"
@using System.Security.Claims;

@attribute [Authorize(Roles = "deliveryBoy,admin")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-md-6">
                <h3>Shipments Available</h3>
                @*<input type="text" class="form-control" placeholder="search by name" @bind="searchString" @bind:event="oninput" @onkeyup="async ()=>await Search()" />*@
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>S.No</th>
                            <th>shipmentId</th>
                            <th>Product Type</th>
                            <th>Container Type</th>
                            <th>Shipment Weight</th>
                            <th>Is Accepted</th>
                            <th>Is Active</th>
                            <th>Available Location</th>
                            <th>Next Location</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    @if (shipments != null && shipments.Count > 0)
                    {
                        @foreach (var shipment in shipments)
                        {
                            <tbody>
                                <tr>
                                    <td>@(sno++)</td>
                                    <td>@shipment.shipmentId</td>
                                    <td>@shipment.productType</td>
                                    <td>@shipment.containerType</td>
                                    <td>@shipment.shipmentWeight</td>
                                    <td>@shipment.isAccepted</td>
                                    <td>@shipment.isActive</td>
                                    <td>@shipment.checkpoint1Id</td>
                                    <td>@shipment.checkpoint2Id</td>
                                    <td>
                                        <button @onclick="() => TakeShipment(shipment.mapId)" class="btn btn-primary">
                                            Get Shipment
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    }
                    else
                    {
                        <p><em>No Record found</em></p>
                    }
                </table>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool loading;
    List<AvailableShipmentsDriver> shipments = new();
    Guid driverId;
    int sno = 1;
    AcceptShipment acceptShipment = new();
    HubConnection hub;

    protected override async Task OnInitializedAsync()
    {
        hub = socket.GetHubConnection();
        if (hub == null)
        {
            await socket.Connect();
        }
        hub = socket.GetHubConnection();
        SocketFunctions();
        sno = 1;
        GetShipmentsNotification();
        StateHasChanged();
    }
    public void SocketFunctions()
    {
        hub.On("refresh", () =>
        {
            GetShipmentsNotification();
            Console.WriteLine("refresh fxn");
            StateHasChanged();

        });
        hub.On("refreshList", () =>
            {
                GetShipmentsNotification();
                Console.WriteLine("refresh list fxn");
                StateHasChanged();
            });
    }
    public async Task<object> TakeShipment(Guid id)
    {
        acceptShipment.driverId = driverId;
        acceptShipment.isAccepted = true;
        acceptShipment.mapId = id;
        var driverIdResponse = await _apiService.AcceptShipment(acceptShipment);
        //_navMgr.NavigateTo($"/tracking/{id}");
        await hub.SendAsync("RefreshAll");
        return 0;
    }
    async Task GetShipmentsNotification()
    {
        // reset alerts on submit
        //AlertService.Clear();
        //loading = true;

        try
        {
            GetYourselfResponse temp = await _apiService.GetYourself();
            driverId = temp.data.userId;
            var driverIdResponse = await _apiService.GetDrivers(driverId);
            Guid checkpoint = driverIdResponse.FirstOrDefault().checkpointLocation;
            shipments = await _apiService.GetAvailableShipments(checkpoint);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
