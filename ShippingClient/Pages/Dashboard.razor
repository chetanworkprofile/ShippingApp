@page "/abc"
@inject Socket socket
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello Welcome Back </h1>
        <h2><b>@context.User.Identity?.Name</b></h2>
        <div class="about-section">
            <h1>About Us </h1>
            <p>We ship your goods while you enjoy in your Couch</p>
            <p>Welcome to our shipping app! We are a team of dedicated individuals who are passionate about providing reliable and efficient shipping services to our customers. Our mission is to make shipping easy and accessible for everyone, no matter where they are in the world.</p>
        </div>

        <h2 style="text-align:center">Our Team</h2>
        <div class="row">
            <div class="column">
                <div class="card">
                    <img src="https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80" alt="Chetan" style="width:100%">
                    <div class="container">
                        <h2>Chetan Gupta</h2>
                        <p class="title">.Net Intern</p>
                        <p>Highly passionate and hardworking</p>
                        <p>chetan.gupta@chicmic.co.in</p>
                        <p><button class="button">Contact</button></p>
                    </div>
                </div>
            </div>

            <div class="column">
                <div class="card">
                    <img src="https://buffer.com/library/content/images/size/w1000/2022/03/sigmund-MQ2xYBHImKM-unsplash--1--1.jpg" alt="Ajay" style="width:100%">
                    <div class="container">
                        <h2>Ajay Joshi</h2>
                        <p class="title">.Net Intern</p>
                        <p>Creative, ethical and extremely hardworking</p>
                        <p>ajay.joshi@chicmic.co.in</p>
                        <p><button class="button">Contact</button></p>
                    </div>
                </div>
            </div>
            <div class="column">
                <div class="card">
                    <img src="https://st.depositphotos.com/1028979/2311/i/600/depositphotos_23114154-stock-photo-tired-young-business-woman-with.jpg" alt="Rakesh" style="width:100%">
                    <div class="container">
                        <h2>Rakesh Kumar</h2>
                        <p class="title">.Net Intern</p>
                        <p>Efficient and true to principles</p>
                        <p>rakesh.kumar23@chicmic.co.in</p>
                        <p><button class="button">Contact</button></p>
                    </div>
                </div>
            </div>
            <div>
                <p>@messages</p>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private static HubConnection? hubConnection;
    private string messages = string.Empty;

    protected override async void OnInitialized()
    {
        // redirect to home if already logged in
        if (_authService.GetToken() != null)
        {
            _navMgr.NavigateTo("/login", true);
        }
        HubConnection hub = socket.GetHubConnection();
        if (hub == null)
        {
            await socket.Connect();
        }
        hub = socket.GetHubConnection();
        Console.WriteLine("helo from hub var" + hub);
        //Connect();
    }






    //private async Task Connect()
    //{
    //    if (hubConnection == null)
    //    {
    //        hubConnection = new HubConnectionBuilder()
    //        .WithUrl(_navMgr.ToAbsoluteUri($"{baseUrl}shippingHub"), options =>
    //        {
    //            options.SkipNegotiation = true;
    //            options.Transports = HttpTransportType.WebSockets;
    //            options.SkipNegotiation = true;
    //            //options.AccessTokenProvider = () => Task.FromResult(_authProvider.GetAuthenticationStateAsync);
    //            options.AccessTokenProvider = async () =>
    //            {
    //                //AuthenticationStateProvider authState = authProvider;
    //                return await _localStorage.GetItemAsync<string>("accessToken");
    //            };
    //        })
    //        .Build();
    //        try
    //        {
    //            await hubConnection.StartAsync();
    //            Console.WriteLine("Connection started");
    //        }
    //        catch (Exception ex)
    //        {
    //            Console.WriteLine("Error while starting connection: " + ex);
    //        }
        
    //    }
        
            
        //hubConnection.On<string, string>("GetThatMessageDude", (user, message) =>
        //{
        //    var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
        //    messages += msg + "\n";
        //    JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
        //    StateHasChanged();
        //});
        
        
       // hubConnection.On("message", (string a) =>
       // {
       //     messages = a;
       //     Console.WriteLine("msg fxn");
       //     StateHasChanged();

       // });

       //// await hubConnection.StartAsync();
       // Console.WriteLine("connected socket adf");
       // await hubConnection.SendAsync("HelloFromUser", "hello all");
    }

    @*//private async Task Send()
    //{
    //    if (hubConnection != null)
    //    {
    //        await hubConnection.SendAsync("AddMessageToChat", username, message);
    //        message = string.Empty;
    //    }
    //}

    //private async Task HandleInput(KeyboardEventArgs args)
    //{
    //    if (args.Key.Equals("Enter"))
    //    {
    //        await Send();
    //    }
    //}

    //public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    //public async ValueTask DisposeAsync()
    //{
    //    if (hubConnection != null)
    //    {
    //        await hubConnection.DisposeAsync();
    //    }
    //}
}
*@