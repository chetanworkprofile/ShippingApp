@page "/tracking"
@page "/tracking/{Id}"

@attribute [Authorize(Roles = "client,admin,deliveryBoy")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div style="margin: 1% auto; width: 75vw; height: 75vh; justify-content:center">
            <h4>Track On Map</h4>
            <div>
                <div id='map' style='width: 1000px; height: 600px;'>
                </div>
            </div>
            <h4 style="margin: auto;">Shipment Id : @shipmentId</h4>
        </div>
        
        <MudTable Items="@list" Hover="true" Loading="@loading" FixedHeader="true"  Height="400px">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Current Location</MudTh>
                <MudTh>Date</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel=""><i class="oi oi-location"></i></MudTd>
                <MudTd DataLabel="Status">@context.shipmentStatus</MudTd>
                <MudTd DataLabel="Current Location">@context.currentLocation</MudTd>
                <MudTd DataLabel="Date">@context.lastUpdated</MudTd>
            </RowTemplate>
            
        </MudTable>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public string? Id { get; set; }
    Guid shipmentId;
    private bool loading = true;
    List<CheckpointModel> routeList = new();
    int countOfChecksInRoute = 0;
    List<float> latitudes = new();
    List<float> longitudes = new();

    protected override async void OnParametersSet()
    {
        if (Id != null)
        {
            shipmentId = new Guid(Id);
            Console.WriteLine(shipmentId);
            routeList = await _apiService.GetShortRoute(shipmentId);
            countOfChecksInRoute = routeList.Count();
            fillArrays(countOfChecksInRoute);
            res = await _apiService.GetShipmentHistory(shipmentId);
            list = res.data;
            loading = false;
            ShipmentStatusModel shipmentStatus = list.FirstOrDefault();
            Checkpoints shipmentCheckpoint = new();
            if (shipmentStatus!.currentLocation != "At Origin")
            {
                var temp = await _apiService.GetCheckpointsByName(shipmentStatus.currentLocation);
                shipmentCheckpoint = temp.data.FirstOrDefault();
            }

            var d = await jsRuntime.InvokeAsync<object>("shipmentHistory", latitudes,longitudes,countOfChecksInRoute,shipmentStatus.shipmentStatus,shipmentCheckpoint.longitude,shipmentCheckpoint.latitude);
            //var d = await jsRuntime.InvokeAsync<object>("initialize", null);
        }
        else
        {
            shipmentId = Guid.Empty;
        }
        StateHasChanged();
    }

    public void fillArrays(int num)
    {
        for(int i = 0; i < num; i++)
        {
            latitudes.Add(routeList[i].latitude);
            longitudes.Add(routeList[i].longitude);
        }
    }

    public Models.ShipmentHistory res = new();
    List<ShipmentStatusModel> list = new();
    
}
