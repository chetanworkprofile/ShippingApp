@page "/setNewPassword"

<PageTitle>Shipment App</PageTitle>

<div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
    <h4 class="card-header">Create New Password</h4>
    <div class="card-body">
        <EditForm Model="setDTO" OnValidSubmit="DoSet">
            <DataAnnotationsValidator />
            <MudCard>
                <MudForm Model="setDTO" ReadOnly="false" @ref="form" @onkeydown="@HandleKeyDown">
                    <MudCardContent>
                        <MudTextField T="string" Label="Password" @bind-Value=setDTO.password
                                      InputType="InputType.Password" HelperText="Choose a strong password"
                                      ValidationMessage For="@(()=>setDTO.password)" Required="true"
                                      RequiredError="Password is required!" />
                        <MudTextField Label="Confirm Password" HelperText="Repeat the password" Required="true"
                                      @bind-Value="confirmPassword" InputType="InputType.Password" RequiredError="Confirm password is required!" />
                    </MudCardContent>
                    <MudCardActions>
                        <div class="d-flex align-center justify-space-between">
                            <MudButton tabindex="0" Variant="Variant.Filled" Color="Color.Primary" Class="align-content-center m-lg-2" disabled="@loading" OnClick="DoSet">
                                @if (loading)
                                {
                                    Task.Delay(5000);
                                    loading = false;
                                }
                                Reset
                            </MudButton>
                            <MudProgressCircular Color="Color.Primary" Indeterminate="loading" />
                        </div>
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Default" Class="align-content-center m-lg-2" disabled="@loading" Href="/login">Login</MudButton>
                        </div>
                    </MudCardActions>
                </MudForm>
                <MudCardContent>
                    <div class="row"><p>Don't have a account?</p></div>
                    <div class="d-flex align-center"><MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="align-content-center m-lg-2" disabled="@loading" Href="/register">Register</MudButton></div>
                </MudCardContent>
            </MudCard>
        </EditForm>
        <MudAlert Severity="Severity.Normal"><p>Please enter OTP that you received on your e-mail</p></MudAlert>
    </div>
</div>


@code {
    //LoginDTO loginModel = new();
    DriverSetPassModel setDTO = new();
    LoginResponse resetResponse = new();
    string confirmPassword = string.Empty;
    MudForm? form;
    [Inject] ISnackbar Snackbar { get; set; }
    private bool loading;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await DoSet();
        }
    }

    async Task DoSet()
    {

        Snackbar.Clear();
        loading = true;
        try
        {
            //resetResponse.message = "Wait....";
            if (setDTO.password == null || setDTO.password == "")
            {
                //resetResponse.message = "Please fill required fields";
                Snackbar.Add("Please Fill All fields", Severity.Error);
                loading = false;
                return;
            }
            if (confirmPassword != setDTO.password)
            {
                //resetResponse.message = "Password and Confirm Password does not match...";
                Snackbar.Add("Password and Confirm Password does not match...", Severity.Error);
                loading = false;
                return;
            }
            //Console.WriteLine("called function reset");
            resetResponse = await _authService.DriverSetPassword(setDTO);
            if (resetResponse.statusCode == 200)
            {
                Snackbar.Add(resetResponse.message, Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                loading = false;
                StateHasChanged();
                await Task.Delay(2000);
                //_navMgr.NavigateTo("/");
            }
            else
            {
                Snackbar.Add(resetResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}
