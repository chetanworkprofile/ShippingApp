@page "/addCheckpoint"

@attribute [Authorize(Roles = "admin")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div class="container-fluid">
            <div id='map' style="min-width: 60vw; min-height: 50vh; max-width: 80vw; max-height: 80vh;">
            </div>
            <div class="card col-sm-6" style="margin: 2% auto; justify-content:center">
                <h4 class="card-header">Add New Checkpoint</h4>
                <div class="card-body">
                    <EditForm Model="checkpointModel" OnSubmit="DoAddCheckpoint">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="type">Name</label>
                            <InputText name="type" class="form-control" @bind-Value="checkpointModel.checkpointName" />
                            <ValidationMessage For="@(()=>checkpointModel.checkpointName)" />
                        </div>
                        <div class="my-2">
                            <button disabled="@IsSpin" type="submit" class="btn btn-primary">
                                @if (IsSpin)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                    Task.Delay(5000);
                                    //loading = false;
                                }
                                Add
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <MudPopover Open="@IsSpin" Class="px-4 pt-4" Style="padding: 10px;" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
            <div class=@(IsSpin ? "spinner-border spinner-border-sm mr-1" : "")  style="height: 5vh; width: 5vh; border-radius: 50%;">
            </div>
        </MudPopover>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    public static Models.AddCheckpoint checkpointModel = new Models.AddCheckpoint();
    GlobalResponse addResponse = new();
    [Inject] ISnackbar Snackbar { get; set; }
    private bool loading;
    private bool IsSpin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var d = await jsRuntime.InvokeAsync<object>("initialize", null);
        }
    }

    [JSInvokable]
    public static void AddCoordinates(float a, float b)
    {
        checkpointModel.latitude = a;
        checkpointModel.longitude = b;
    }

    async Task DoAddCheckpoint()
    {
        //loading = true;
        IsSpin = true;
        Console.WriteLine(IsSpin);
        StateHasChanged();
        try
        {
            addResponse = await _apiService.AddCheckpoint(checkpointModel);
            if (addResponse.statusCode == 401)
            {
                _navMgr.NavigateTo("/logout");
                return;
            }
            if (addResponse.statusCode == 200)
            {
                Snackbar.Add("Checkpoint Added Successfully", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
            else
            {
                Snackbar.Add(addResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
            checkpointModel.checkpointName = "";
            IsSpin = false;
            Console.WriteLine(IsSpin);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Server Error", Severity.Error);
            IsSpin = false;
            loading = false;
            StateHasChanged();
        }
    }
}










@*<div class="form-group">
<label for="price">Latitude</label>
<InputNumber id="price" class="form-control" @bind-Value="checkpointModel.latitude" />
<ValidationMessage For="@(()=>checkpointModel.latitude)" />
</div>
<div class="form-group">
<label for="price">Longitude</label>
<InputNumber id="price" class="form-control" @bind-Value="checkpointModel.longitude" />
<ValidationMessage For="@(()=>checkpointModel.longitude)" />
</div>
<div class="my-2">
@addResponse.message
</div>*@