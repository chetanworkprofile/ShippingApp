@page "/updateDriverLocation"

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "deliveryBoy")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
            <h4 class="card-header">Update Location</h4>
            <div class="card-body">
                <EditForm Model="point" OnSubmit="DoUpdateLocation" @onkeyup="@HandleKeyDown">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-4">
                            <label for="checkpoint" class="control-label">Current Checkpoint</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <select class="form-control" onchange="@CheckpointClicked">
                                <option value="@Guid.Empty">-- Select Checkpoint --</option>
                                @foreach (var checkpoint in checkpointsList)
                                {
                                    <option value="@checkpoint.checkpointId">@checkpoint.checkpointName</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="my-2">
                        <button disabled="@loading" type="submit" class="btn btn-primary">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                Task.Delay(5000);
                                loading = false;
                            }
                            Update
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    //Models.AddProductType productTypeModel = new();
    GlobalResponse updateResponse = new();
    [Inject] ISnackbar Snackbar { get; set; }
    private bool loading;

    public class Point{
        public Guid checkpoint { get; set; }
        public Point()
        {

        }
    }
    Point point = new Point();
    List<Checkpoints> checkpointsList = new List<Checkpoints>();

    protected override async void OnInitialized()
    {
        GlobalResponse res = await _apiService.GetCheckpoints();
        var obj = JsonSerializer.Serialize(res.data);
        checkpointsList = JsonSerializer.Deserialize<List<Checkpoints>>(obj);
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        Snackbar.Clear();
        
        if (e.Key == "Enter")
        {
            await DoUpdateLocation();
        }
    }

    async Task DoUpdateLocation()
    {
        loading = true;

        try
        {
            updateResponse = await _apiService.UpdateDriverLocation(point.checkpoint);
            if (updateResponse.statusCode == 401)
            {
                _navMgr.NavigateTo("/logout");
                return;
            }
            if (updateResponse.statusCode == 200)
            {
                Snackbar.Add(updateResponse.message, Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
            else
            {
                Snackbar.Add(updateResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
    void CheckpointClicked(ChangeEventArgs updateEvent)
    {
        point.checkpoint = new Guid(updateEvent.Value!.ToString()!);
        StateHasChanged();
    }
}
