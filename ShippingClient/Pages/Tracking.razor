@page "/trackingForDriver"

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager UriHelper

@attribute [Authorize(Roles = "deliveryBoy,admin,client,manager")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div style="margin: 10% auto; width: 80vw; height: 80vh; justify-content:center">
            <h4>Track On Map</h4>
            <div>
            <div id='map' style='width: 1000px; height: 600px;'>
            </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    float origincc1 = 74.87469F;
    float origincc2 = 31.63174F;
    float destinationcc1 = 77.1025F;
    float destinationcc2 = 28.7041F;
    public string origin = "ludhiana";
    public string destination = "chandigarh";
    Checkpoints checkOrigin;
    Checkpoints checkDestination;

    List<Checkpoints> checkpointsList = new List<Checkpoints>();
    protected override async Task OnInitializedAsync()
    {
        var query = new Dictionary<string, string> { { "origin", "origin" },{ "dest", "dest" } };

        _navMgr.NavigateTo(QueryHelpers.AddQueryString(_navMgr.Uri, query));

        var uri = _navMgr.ToAbsoluteUri(_navMgr.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("origin", out var param))
        {
            origin = param.First();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("destination", out param))
        {
            destination = param.First();
        }

        GetCheckpointsResponse checkpoints = await _apiService.GetCheckpointsByName(origin);
        checkOrigin = checkpoints.data.FirstOrDefault();
        checkpoints = await _apiService.GetCheckpointsByName(destination);
        checkDestination = checkpoints.data.FirstOrDefault();
        origincc1 = checkOrigin.longitude;
        origincc2 = checkOrigin.latitude;
        destinationcc1 = checkDestination.longitude;
        destinationcc2 = checkDestination.latitude;
        Console.WriteLine("origin: " + origincc1 + origincc2 + " dest: " + destinationcc1 + destinationcc2);
        var d = await jsRuntime.InvokeAsync<object>("trackOnOriginDest", origincc1, origincc2, destinationcc1, destinationcc2);
    }
}