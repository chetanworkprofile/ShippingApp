@page "/getProductTypes"
@using System.Text.Json;


@attribute [Authorize(Roles = "admin")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="Auth">
        <div class="row">
            <div>
                <div class="row justify-content-end" style="margin: 10px;">
                    <h3 class="col-8 justify-content-start">Product Types List</h3>
                    <MudFab Class="col-4" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="@ToggleOpenAdd" />
                </div>
                <input type="text" class="form-control" placeholder="search by name" @bind="searchString" @bind:event="oninput" @onkeyup="async ()=>await Search()" />
                
                <MudTable Loading="@loading" Items="@productTypeList" Hover="true">
                    <HeaderContent>
                            <MudTh>Id</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>Price(per kg)</MudTh>
                            <MudTh>Is Fragile</MudTh>
                            <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.productTypeId</MudTd>
                        <MudTd DataLabel="Type">@context.type</MudTd>
                        <MudTd DataLabel="Price">@context.price</MudTd>
                        <MudTd DataLabel="Is Fragile">@context.isFragile</MudTd>
                        <MudTd Class="col-3">
                            @*<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleOpenUpdate" />*@
                            <MudFab Class="col-1" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => Update(context.productTypeId)" />

                            <MudFab Class="col-1" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => ToggleOpenDelete(context.productTypeId)" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                </div>
            </div>
        <MudPopover Open="@_isOpenAdd" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
            <div class="d-flex flex-column">
                <AddProductType />
                <MudButton OnClick="@ToggleOpenAdd" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
            </div>
        </MudPopover>
        <MudPopover Open="@_isOpenUpdate" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
            <div class="d-flex flex-column">
                <UpdateProductType Id=@tempId.ToString() />
                <MudButton OnClick="@ToggleOpenUpdate" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
            </div>
        </MudPopover>
        <MudPopover Open="@_isOpenDelete" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
            <div class="d-flex flex-column row">
                <MudText>Are You Sure you want to Delete this ?</MudText>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Class="ml-auto" Color="Color.Error" OnClick="@Delete">Delete</MudButton>
                <MudButton Variant="Variant.Filled" OnClick="() => ToggleOpenDelete(Guid.Empty)" Class="ml-auto" Color="Color.Default">Close</MudButton>
            </div>
        </MudPopover>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    GlobalResponse productTypesResponse = new();
    List<ProductType> productTypeList = new();
    string searchString = string.Empty;
    private bool loading;
    public bool _isOpenAdd;
    public bool _isOpenUpdate;
    public bool _isOpenDelete;

    Guid tempId = Guid.Empty;

    public async Task Update(Guid id)
    {
        tempId = id;
        await ToggleOpenUpdate();
    }

    public async Task ToggleOpenAdd()
    {
        if (_isOpenAdd)
        {
            _isOpenAdd = false;
            await GetProductTypesList();
        }
        else
            _isOpenAdd = true;
    }

    public async Task ToggleOpenUpdate()
    {
        if (_isOpenUpdate)
        {
            _isOpenUpdate = false;
            await GetProductTypesList();
        }
        else
            _isOpenUpdate = true;
    }
    public void ToggleOpenDelete(Guid id)
    {
        tempId = id;
        if (_isOpenDelete)
            _isOpenDelete = false;
        else
            _isOpenDelete = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetProductTypesList();
        StateHasChanged();
    }

    protected async Task Search()
    {
        await GetProductTypesList(searchString);
        StateHasChanged();
    }

    protected async Task Delete()
    {
        await _apiService.RemoveProductType(tempId);
        await GetProductTypesList();
        ToggleOpenDelete(Guid.Empty);
        StateHasChanged();
    }

    async Task GetProductTypesList(string? search=null)
    {
        loading = true;

        try
        {
            productTypesResponse = await _apiService.GetProductTypes(search);
            loading = false;
            var obj = JsonSerializer.Serialize(productTypesResponse.data);
            productTypeList = JsonSerializer.Deserialize<List<ProductType>>(obj);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}










@*<table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Type</th>
                            <th>Price(/kg)</th>
                            <th>Is Fragile?</th>
                        </tr>
                    </thead>
                    @if (productTypeList != null && productTypeList.Count > 0)
                    {
                        @foreach (var productType in productTypeList)
                        {
                            <tbody>
                                <tr>
                                    <td>@productType.productTypeId</td>
                                    <td>@productType.type</td>
                                    <td>@productType.price</td>
                                    <td>@productType.isFragile</td>
                                    @*<td>
                                        <a href="/person/edit/@person.Id" class="btn btn-success">Edit</a>
                                        <a class="btn btn-danger" @onclick="async ()=> await Delete(person)">Delete</a>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    }
                    else
                    {
                        <p><em>No Record found</em></p>
                    }
                </table>*@

 @*<nav aria-label="Page navigation example">
                    <ul class="pagination">
                        @if (personData.PageNumber > 1)
                        {
                            <li class="page-item">
                                <a @onclick="async ()=> await GetPersons(personData.PageNumber-1)" class="page-link" style="cursor:pointer" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }
                        @for (int i = 1; i <= personData.TotalPages; i++)
                        {

                            string activeClass = (i == personData.PageNumber) ? "active" : "";
                            int c = i;
                            <li class="page-item @activeClass"><a @onclick="async ()=> await GetPersons(c)" style="cursor:pointer" class="page-link">@c</a></li>
                        }
                        @if (personData.PageNumber < personData.TotalPages)
                        {
                            <li class="page-item">
                                <a @onclick="async ()=> await GetPersons(personData.PageNumber+1)" class="page-link" style="cursor:pointer" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>*@