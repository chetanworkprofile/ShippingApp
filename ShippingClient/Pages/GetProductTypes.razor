@page "/getProductTypes"
@using ShippingClient.Models;
@using ShippingClient.Services.Contracts;
@inject IAPIService _apiService;
@inject NavigationManager _navMgr;
@inject IAlertService AlertService;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "admin")]

<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-md-6">
                <h3>Product Types List</h3>
                <input type="text" class="form-control" placeholder="search by name" @bind="searchString" @bind:event="oninput" @onkeyup="async ()=>await Search()" />
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Type</th>
                            <th>Price(/kg)</th>
                            <th>Is Fragile?</th>
                        </tr>
                    </thead>
                    @if (productTypeList != null && productTypeList.Count > 0)
                    {
                        @foreach (var productType in productTypeList)
                        {
                            <tbody>
                                <tr>
                                    <td>@productType.productTypeId</td>
                                    <td>@productType.type</td>
                                    <td>@productType.price</td>
                                    <td>@productType.isFragile</td>
                                    @*<td>
                                        <a href="/person/edit/@person.Id" class="btn btn-success">Edit</a>
                                        <a class="btn btn-danger" @onclick="async ()=> await Delete(person)">Delete</a>
                                    </td>*@
                                </tr>
                            </tbody>
                        }
                    }
                    else
                    {
                        <p><em>No Record found</em></p>
                    }
                </table>
                @*<nav aria-label="Page navigation example">
                    <ul class="pagination">
                        @if (personData.PageNumber > 1)
                        {
                            <li class="page-item">
                                <a @onclick="async ()=> await GetPersons(personData.PageNumber-1)" class="page-link" style="cursor:pointer" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }
                        @for (int i = 1; i <= personData.TotalPages; i++)
                        {

                            string activeClass = (i == personData.PageNumber) ? "active" : "";
                            int c = i;
                            <li class="page-item @activeClass"><a @onclick="async ()=> await GetPersons(c)" style="cursor:pointer" class="page-link">@c</a></li>
                        }
                        @if (personData.PageNumber < personData.TotalPages)
                        {
                            <li class="page-item">
                                <a @onclick="async ()=> await GetPersons(personData.PageNumber+1)" class="page-link" style="cursor:pointer" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>*@
                </div>
            </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    GetProductsResponse productTypesResponse = new();
    List<ProductType> productTypeList = new();
    string searchString = string.Empty;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        await GetProductTypesList();
        StateHasChanged();
    }

    protected async Task Search()
    {
        await GetProductTypesList(searchString);
        StateHasChanged();
    }

    async Task GetProductTypesList(string? search=null)
    {
        // reset alerts on submit
        AlertService.Clear();
        loading = true;

        try
        {
            productTypesResponse = await _apiService.GetProductTypes(search);
            productTypeList = productTypesResponse.data;
            if (productTypesResponse.statusCode != 0)
            {
                AlertService.Success("Product Types list fetched successfully", keepAfterRouteChange: true);
                //_navMgr.NavigateTo("/shipmentHistory");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
