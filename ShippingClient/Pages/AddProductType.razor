@page "/addProductType"

@attribute [Authorize(Roles = "admin")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
       @* <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">*@
            <h4 class="card-header">Add New Product Type</h4>
            <div class="card-body">
            <EditForm Model="productTypeModel" OnSubmit="DoAddProductType" @onkeyup="@HandleKeyDown">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="type">Type (name)</label>
                        <InputText name="type" class="form-control" @bind-Value="productTypeModel.type" />
                        <ValidationMessage For="@(()=>productTypeModel.type)" />
                    </div>
                    <div class="form-group">
                        <label for="price">Price (per kg)</label>
                        <InputNumber id="price" class="form-control" @bind-Value="productTypeModel.price" />
                        <ValidationMessage For="@(()=>productTypeModel.price)" />
                    </div>
                    <div class="form-group">
                        <label for="isFragile">Is it Fragile?</label>
                        <input type="radio" checked="@(isFragileCheck == true)"
                               name="isFragile" @onchange="@(() => isFragileCheck = true)" />
                        <label>Yes</label>

                        <input type="radio" checked="@(isFragileCheck == false)"
                               name="isFragile" @onchange="@(() => isFragileCheck = false)" />
                        <label>No</label>
                    </div>
                    
                    <div class="my-2">
                        <button disabled="@loading" type="submit" class="btn btn-primary">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                Task.Delay(5000);
                                loading = false;
                            }
                            Add
                        </button>
                    </div>
                </EditForm>
            </div>
       @* </div>*@
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    Models.AddProductType productTypeModel = new();
    GlobalResponse addProductTypeResponse = new();
    private bool loading;
    private bool isFragileCheck = true;
    [Inject] ISnackbar Snackbar { get; set; }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        Snackbar.Clear();
        
        if (e.Key == "Enter")
        {
            await DoAddProductType();
        }
    }

    async Task DoAddProductType()
    {
        loading = true;
        productTypeModel.isFragile = isFragileCheck;
        try
        {
            addProductTypeResponse = await _apiService.AddProductType(productTypeModel);
            if (addProductTypeResponse.statusCode == 401)
            {
                _navMgr.NavigateTo("/logout");
                return;
            }
            if (addProductTypeResponse.statusCode == 200)
            {
                Snackbar.Add("Product Type Added Successfully", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                //_navMgr.NavigateTo("/shipmentHistory");
            }
            else
            {
                Snackbar.Add(addProductTypeResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}
