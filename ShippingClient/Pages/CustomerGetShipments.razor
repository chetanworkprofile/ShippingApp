@page "/customerGetShipments"

@attribute [Authorize(Roles = "client,admin")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="Auth">
        <div class="row">
            <div>
                <h3>Shipment History</h3>
                @*<input type="text" class="form-control" placeholder="search by name" @bind="searchString" @bind:event="oninput" @onkeyup="async ()=>await Search()" />*@
                @*<table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Product Type</th>
                            <th>Container Type</th>
                            <th>Shipment Price</th>
                            <th>Shipment Weight</th>
                            <th>Origin</th>
                            <th>Destination</th>
                            <th>Order Date</th>
                            <th>Notes</th>
                            <th>Status</th>
                            <th>Current Location</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    @if (shipmentList != null && shipmentList.Count > 0)
                    {
                        @foreach (var shipment in shipmentList)
                        {
                            <tbody>
                                <tr>
                                    <td>@shipment.shipmentId</td>
                                    <td>@shipment.productType</td>
                                    <td>@shipment.cointainerType</td>
                                    <td>@shipment.shipmentPrice</td>
                                    <td>@shipment.shipmentWeight</td>
                                    <td>@shipment.origin</td>
                                    <td>@shipment.destination</td>
                                    <td>@shipment.dateOfOrder</td>
                                    <td>@shipment.notes</td>
                                    <td>@shipment.shipmentStatus</td>
                                    <td>@shipment.currentLocation</td>
                                    <td>
                                        <button @onclick="() => ShowStatus(shipment.shipmentId)" class="btn btn-primary">
                                            Show Status
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    }
                    else
                    {
                        <p><em>No Record found</em></p>
                    }
                </table>*@
                <MudTable Loading="@loading" Items="@shipmentList" Hover="true" >
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Product Type</MudTh>
                        <MudTh>Container Type</MudTh>
                        <MudTh>Shipment Price</MudTh>
                        <MudTh>Shipment Weight</MudTh>
                        <MudTh>Origin</MudTh>
                        <MudTh>Destination</MudTh>
                        <MudTh>Order Date</MudTh>
                        <MudTh>Notes</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Current Location</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.shipmentId</MudTd>
                        <MudTd DataLabel="Product Type">@context.productType</MudTd>
                        <MudTd DataLabel="Container Type">@context.cointainerType</MudTd>
                        <MudTd DataLabel="Shipment Price">@context.shipmentPrice</MudTd>
                        <MudTd DataLabel="Shipment Weight">@context.shipmentWeight</MudTd>
                        <MudTd DataLabel="Origin">@context.origin</MudTd>
                        <MudTd DataLabel="Destination">@context.destination</MudTd>
                        <MudTd DataLabel="Order Date">@context.dateOfOrder</MudTd>
                        <MudTd DataLabel="Notes">@context.notes</MudTd>
                        <MudTd DataLabel="Status">@context.shipmentStatus</MudTd>
                        <MudTd DataLabel="Current Location">@context.currentLocation</MudTd>
                        <MudTd DataLabel="Action"><MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="align-content-center m-lg-2" disabled="@loading" @onclick="() => ShowStatus(context.shipmentId)">Get Status</MudButton></MudTd>
                    </RowTemplate>
                </MudTable>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    GetShipmentsCutomerResponse shipmentsResponse = new();
    List<GetListOfShipments> shipmentList = new();
    [Inject] ISnackbar Snackbar { get; set; }
    //List<GetShipmentsConverted> shipmentListConverted = new();
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        await GetShipmentsTypesList();
        StateHasChanged();
    }

    public object ShowStatus(Guid id)
    {
        _navMgr.NavigateTo($"/tracking/{id}");
        return 0;
    }

    async Task GetShipmentsTypesList()
    {
        // reset alerts on submit
        //AlertService.Clear();
        loading = true;

        try
        {
            GetYourselfResponse temp = await _apiService.GetYourself();
            Guid tempId = temp.data.userId;
            shipmentsResponse = await _apiService.GetShipmentsForCustomer(tempId);
            shipmentList = shipmentsResponse.data;
            if (shipmentsResponse.statusCode == 200)
            {
                loading = false;
                //Snackbar.Add(shipmentsResponse.message, Severity.Success);
                //AlertService.Success("Shipments list fetched successfully", keepAfterRouteChange: true);
                //_navMgr.NavigateTo("/shipmentHistory");
            }
            else
            {
                Snackbar.Add(shipmentsResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}
