@page "/register"
@using ShippingClient.Models;
@using ShippingClient.Services.Contracts;
@inject IAuthenticationService _authService;
@inject NavigationManager _navMgr;
@inject IAlertService AlertService

<style type="text/css">
input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button { 
-webkit-appearance: none;
-moz-appearance: none;
appearance: none;
margin: 0; 
}
</style>

<AuthorizeView>
    <Authorized>
        <p>You are already authorized</p>
        @if (true)
        {
            Task.Delay(2000);
            _navMgr.NavigateTo("/");
        }
    </Authorized>
    <NotAuthorized Context="auth">
        <div class="card">
            <h4 class="card-header">Register</h4>
            <div class="card-body">
                <EditForm Model="@registerModel" OnValidSubmit="DoRegister">
                    <DataAnnotationsValidator />
                     <div class="form-group">
                       <label for="firstName">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="registerModel.firstName" />
                        <ValidationMessage For="@(()=>registerModel.firstName)" />
                    </div>

                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="registerModel.lastName" />
                        <ValidationMessage For="@(()=>registerModel.lastName)" />
                    </div>
                     <div class="form-group">
                       <label for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="registerModel.email" />
                        <ValidationMessage For="@(()=>registerModel.email)" />
                    </div>

                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.password" />
                        <ValidationMessage For="@(()=>registerModel.password)" />
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Confirm Password</label>
                        <InputText id="confirmPassword" type="Password" class="form-control" @bind-Value="confirmPassword" />
                    </div>
                    <div class="form-group">
                        <label for="contact">Contact No.</label>
                        <InputNumber id="contact" class="form-control" @bind-Value="registerModel.contactno" />
                        <ValidationMessage For="@(()=>registerModel.contactno)" />
                    </div>

                    <div class="form-group">
                        <label for="address">Address</label>
                        <InputText type="address" class="form-control" @bind-Value="registerModel.address" />
                        <ValidationMessage For="@(()=>registerModel.address)" />
                    </div>

                    <div class="my-2">
                        @registerResponse.message
                    </div>

                    <div class="my-2">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                            Task.Delay(5000);
                            loading = false;
                        }
                        <button type="submit" class="btn btn-primary">Register</button>
                    </div>
                </EditForm>
                <p>Already have a account?</p><NavLink href="/login" class="btn btn-link">Login</NavLink>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    RegisterUser registerModel = new RegisterUser();
    LoginResponse registerResponse = new();
    string confirmPassword = string.Empty;
    private bool loading;
    async Task DoRegister()
    {
        try
        {
            loading = true;
            if (confirmPassword != registerModel.password)
            {
                registerResponse.message = "Password and Confirm Password does not match...";
                loading = false;
                return;
            }
            registerResponse.message = "Wait....";
            registerResponse = await _authService.Register(registerModel);
            if (registerResponse.statusCode != 0)
                _navMgr.NavigateTo("/");
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            //StateHasChanged();
        }
    }
}