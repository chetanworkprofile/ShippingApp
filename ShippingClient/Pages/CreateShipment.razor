@page "/createShipment"

@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@attribute [Authorize(Roles = "admin,client,manager")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
            <h4 class="card-header">Create Shipment</h4>
            <div class="card-body">
                @if(productTypeList == null || containerTypeList == null){
                    <p><em>Loading...</em></p>
                }
                else{
                    <EditForm Model="shipmentModel" OnValidSubmit="ToggleOpen">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-4">
                            <label for="ProductType" class="control-label">Product Type</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <select class="form-control" onchange="@ProductTypeClicked" required>
                                <option value="" disabled selected>-- Select ProductType --</option>
                                @foreach (var product in productTypeList)
                                {
                                    <option value="@product.productTypeId">@product.type</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label for="ContainerType" class="control-label">Container Type</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <select class="form-control" onchange="@ContainerTypeClicked" required>
                                <option value="" disabled selected>-- Select ContainerType --</option>
                                @if (containerTypeList != null)
                                {
                                    @foreach (var container in containerTypeList)
                                    {
                                        <option value="@container.containerTypeId">@container.containerName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    @*//----------------------------------------------------------------//*@
                    <div class="row">
                        <div class="col-md-4">
                            <label for="origin" class="control-label">Origin</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <select class="form-control" onchange="@OriginClicked" required>
                                <option value="" disabled selected>-- Select Origin --</option>
                                @foreach (var origin in checkpointsList)
                                {
                                    @*if (origin.checkpointId == destination)
                                    {
                                        <option value="@origin.checkpointId" disabled>@origin.checkpointName</option>
                                    }
                                    else*@
                                    {
                                        <option value="@origin.checkpointId">@origin.checkpointName</option>    
                                    }
                                }
                            </select>
                        </div>
                    </div>
                        <div class="row">
                        <div class="col-md-4">
                            <label for="destination" class="control-label">Destination</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <select class="form-control" onchange="@DestinationClicked" required>
                                <option value="" disabled selected>-- Select Destination --</option>
                                    @foreach (var dest in checkpointsList)
                                    {
                                        @*if (dest.checkpointId == origin)
                                        {
                                            <option value="@dest.checkpointId" disabled>@dest.checkpointName</option>
                                        }
                                        else*@
                                        {
                                            <option value="@dest.checkpointId">@dest.checkpointName</option>
                                        }
                                    }
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="contact">Weight</label>
                        <InputNumber id="contact" class="form-control" @bind-Value="shipmentModel.shipmentWeight" />
                        <ValidationMessage For="@(()=>shipmentModel.shipmentWeight)" />
                    </div>

                    <div class="form-group">
                        <label for="notes">Notes</label>
                        <InputTextArea type="notes" class="form-control" @bind-Value="shipmentModel.notes" />
                        <ValidationMessage For="@(()=>shipmentModel.notes)" />
                    </div>

                    <div class="my-2">
                        @*<button disabled="@loading" type="submit" class="btn btn-primary">*@
                        <button type="submit" class="btn btn-primary">
                            @*@if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                Task.Delay(5000);
                                loading = false;
                            }*@
                            Next
                        </button>
                    </div>
                </EditForm>
                }
            </div>
        </div>
        <MudPopover Open="@_isOpen" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
            <div class="container d-flex flex-column">
                <MudPaper Width="40vw" Height="40vh" Class="col-6" Square="true">
                    <MudList>
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>Weight</div>
                            <div>@shipmentModel.shipmentWeight</div>
                            </div>
                        </MudListItem>
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>Cost</div>
                                <div>@((int)cost)</div>
                            </div>
                        </MudListItem>
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>GST(18% of cost)</div>
                                <div>@((int)(0.18*cost))</div>
                            </div>
                        </MudListItem>
                        <MudDivider />
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>Total Cost</div>
                                <div>@((int)(1.18*cost))</div>
                            </div>
                        </MudListItem>
                    </MudList>
                </MudPaper>
                <MudButton  type="submit" Variant="Variant.Filled" Color="Color.Default" Class="align-content-center m-lg-2" OnClick="DoCreateShipment">
                    Confirm
                </MudButton>
                <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
            </div>
        </MudPopover>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    Models.CreateShipment shipmentModel = new();
    CreateShipmentResponse createShipmentResponse = new();
    private bool loading;
    [Inject] ISnackbar Snackbar { get; set; }
    List<ProductType> productTypeList = new List<ProductType>();
    List<ContainerType> containerTypeList = new List<ContainerType>();
    List<Checkpoints> checkpointsList = new List<Checkpoints>();
    //List<Checkpoints> originList = new List<Checkpoints>();
    //List<Checkpoints> destList = new List<Checkpoints>();

    Guid productTypeId;
    Guid containerTypeId;
    Guid origin = Guid.Empty;
    Guid destination = Guid.Empty;
    decimal weight;
    string notes = string.Empty;
    public bool _isOpen;

    public float cost = 0;

    public async Task Calculate()
    {
        loading = true;
        shipmentModel.origin = origin;
        shipmentModel.destination = destination;
        shipmentModel.productTypeId = productTypeId;
        shipmentModel.containerTypeId = containerTypeId;
        GlobalResponse response = await _apiService.GetCost(shipmentModel);
        cost = JsonSerializer.Deserialize<float>(JsonSerializer.Serialize(response.data));
        StateHasChanged();
    }

    public async void ToggleOpen()
    {
        Calculate();
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    protected override async void OnInitialized()
    {
        HubConnection hub = socket.GetHubConnection();
        if (hub == null)
        {
            await socket.Connect();
        }
        hub = socket.GetHubConnection();

        GlobalResponse productTypes = await _apiService.GetProductTypes();
        var obj = JsonSerializer.Serialize(productTypes.data);
        productTypeList = JsonSerializer.Deserialize<List<ProductType>>(obj);

        GlobalResponse containerTypes = await _apiService.GetContainerTypes();
        obj = JsonSerializer.Serialize(containerTypes.data);
        containerTypeList = JsonSerializer.Deserialize<List<ContainerType>>(obj);

        GetCheckpointsResponse checkpoints = await _apiService.GetCheckpoints();
        checkpointsList = checkpoints.data;
        //originList = checkpointsList;
        //destList = checkpointsList;
        StateHasChanged();
    }
    async Task DoCreateShipment()
    {
        // reset alerts on submit
        //AlertService.Clear();
        loading = true;
        shipmentModel.origin = origin;
        shipmentModel.destination = destination;
        shipmentModel.productTypeId = productTypeId;
        shipmentModel.containerTypeId = containerTypeId;
        try
        {
            if (origin == destination)
            {
                //createShipmentResponse.message = "Origin and Destination can't be same";
                Snackbar.Add("Origin and Destination can't be same", Severity.Error);
                loading = false;
                return;
            }
            //createShipmentResponse.message = "Wait....";
            createShipmentResponse = await _apiService.CreateShipment(shipmentModel);
            if (createShipmentResponse.statusCode == 200)
            {
                //AlertService.Success("Shipment Queued successfully", keepAfterRouteChange: true);
                Snackbar.Add("Shipment Queued Successfully", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                _navMgr.NavigateTo("/customerGetShipments");
            }
            else
            {
                Snackbar.Add(createShipmentResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
    void OriginClicked(ChangeEventArgs originEvent)
    {
        //Checkpoints? temp = checkpointsList.Where(s => s.checkpointId == new Guid(originEvent.Value!.ToString()!)).FirstOrDefault();
        //destList = checkpointsList;
        //destList.Remove(temp);
        origin = new Guid(originEvent.Value.ToString());
        this.StateHasChanged();
    }
    void DestinationClicked(ChangeEventArgs destEvent)
    {
        //Checkpoints? temp = checkpointsList.Where(s => s.checkpointId == new Guid(destEvent.Value!.ToString()!)).FirstOrDefault();
        //originList = checkpointsList;
        //originList.Remove(temp);
        Console.WriteLine(destEvent.Value);
        destination = new Guid(destEvent.Value.ToString());
        this.StateHasChanged();
    }
    void ProductTypeClicked(ChangeEventArgs productTypeEvent)
    {
        //productTypeList.Clear();
        productTypeId = new Guid(productTypeEvent.Value.ToString());
        this.StateHasChanged();
    }
    void ContainerTypeClicked(ChangeEventArgs containerTypeEvent)
    {
        //containerTypeList.Clear();
        containerTypeId = new Guid(containerTypeEvent.Value.ToString());
        this.StateHasChanged();
    }
}
