@page "/createShipment"

@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@attribute [Authorize(Roles = "admin,client,manager")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
        <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
            <h4 class="card-header">Create Shipment</h4>
            <div class="card-body">
                @if(productTypeList == null || containerTypeList == null){
                    <p><em>Loading...</em></p>
                }
                else{
                    <EditForm Model="shipmentModel" OnValidSubmit="ToggleOpen">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-4">
                            <label for="ProductType" class="control-label">Product Type</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <input type="text" list="list-productTypes" class="form-control" placeholder="search ProductType" @bind="searchProductType" @bind:event="oninput" />
                                <datalist id="list-productTypes">
                                    @if (productTypeList != null)
                                    {
                                        foreach (var a in productTypeList)
                                        {
                                            {
                                                <option value="@a.type" />
                                            }
                                        }
                                    }
                                </datalist>
                            @*<select class="form-control" onchange="@ProductTypeClicked" required>
                                <option value="" disabled selected>-- Select ProductType --</option>
                                @foreach (var product in productTypeList)
                                {
                                    <option value="@product.productTypeId">@product.type</option>
                                }
                            </select>*@
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label for="ContainerType" class="control-label">Container Type</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                                <input type="text" list="list-containerTypes" class="form-control" placeholder="search ContainerType" @bind="searchContainerType" @bind:event="oninput" />
                                <datalist id="list-containerTypes">
                                    @if (productTypeList != null)
                                    {
                                        foreach (var a in containerTypeList)
                                        {
                                            {
                                                <option value="@a.containerName" />
                                            }
                                        }
                                    }
                                </datalist>
                            @*<select class="form-control" onchange="" required>
                                <option value="" disabled selected>-- Select ContainerType --</option>
                                @if (containerTypeList != null)
                                {
                                    @foreach (var container in containerTypeList)
                                    {
                                        <option value="@container.containerTypeId">@container.containerName</option>
                                    }
                                }
                            </select>*@
                        </div>
                    </div>
                    @*//----------------------------------------------------------------//*@
                    <div class="row">
                        <div class="col-md-4">
                            <label for="origin" class="control-label">Origin</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                                <input type="text" list="list-origin" class="form-control" placeholder="search origin" @bind="searchOrigin" @bind:event="oninput" />
                                <datalist id="list-origin">
                                    @if (originList != null)
                                    {
                                        foreach (var origin in originList)
                                        {
                                            @*if (dest.checkpointId == origin)
                                            {
                                            <option value="@dest.checkpointId" disabled>@dest.checkpointName</option>
                                            }
                                            else*@
                                            {
                                                <option value="@origin.checkpointName"/>
                                            }
                                        }
                                    }
                                </datalist>
                            @*<select class="form-control" onchange="@OriginClicked" required>
                                <option value="" disabled selected>-- Select Origin --</option>
                                @foreach (var origin in originList)
                                {
                                    @*if (origin.checkpointId == destination)
                                    {
                                        <option value="@origin.checkpointId" disabled>@origin.checkpointName</option>
                                    }
                                    else*
                                    {
                                        <option value="@origin.checkpointId">@origin.checkpointName</option>    
                                    }
                                }
                            </select>*@
                        </div>
                    </div>
                        <div class="row">
                        <div class="col-md-4">
                            <label for="destination" class="control-label">Destination</label>
                        </div>
                    </div>
                    <div class="row" style="padding-top:10px">
                        <div class="col-md">
                            <input type="text" list="list-dest" class="form-control" placeholder="search destination" @bind="searchDest" @bind:event="oninput"  />
                            @*<select class="form-control" onchange="@DestinationClicked" required>*@
                                    @*<option value="" disabled selected>-- Select Destination --</option>*@
                                    <datalist id="list-dest">
                                    @if (destList != null)
                                    {
                                        foreach (var dest in destList)
                                        {
                                            @*if (dest.checkpointId == origin)
                                            {
                                            <option value="@dest.checkpointId" disabled>@dest.checkpointName</option>
                                            }
                                            else*@
                                            {
                                                <option value="@dest.checkpointName"/>
                                            }
                                        }
                                    }
                                </datalist>
                            @*</select>*@
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="contact">Weight</label>
                        <InputNumber id="contact" class="form-control" @bind-Value="shipmentModel.shipmentWeight" />
                        <ValidationMessage For="@(()=>shipmentModel.shipmentWeight)" />
                    </div>

                    <div class="form-group">
                        <label for="notes">Notes</label>
                        <InputTextArea type="notes" class="form-control" @bind-Value="shipmentModel.notes" />
                        <ValidationMessage For="@(()=>shipmentModel.notes)" />
                    </div>

                    <div class="my-2">
                        <button type="submit" class="btn btn-primary">
                            Next
                        </button>
                    </div>
                </EditForm>
                }
            </div>
        </div>
        <MudPopover Open="@_isOpen" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Style="z-index: 2;">
            <div class="container d-flex flex-column">
                <MudPaper Width="40vw" Height="40vh" Class="col-6" Square="true">
                    <MudList>
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>Weight</div>
                            <div>@shipmentModel.shipmentWeight</div>
                            </div>
                        </MudListItem>
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>Cost</div>
                                <div>@(cost.ToString("N0"))</div>
                            </div>
                        </MudListItem>
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>GST(18% of cost)</div>
                                <div>@((0.18 * cost).ToString("N0"))</div>
                            </div>
                        </MudListItem>
                        <MudDivider />
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>Total Cost</div>
                                <div>@((1.18 * cost).ToString("N0"))</div>
                            </div>
                        </MudListItem>
                    </MudList>
                </MudPaper>
                <MudButton  type="submit" Variant="Variant.Filled" Color="Color.Default" Class="align-content-center m-lg-2" OnClick="CreateOrder">
                    Confirm & Proceed to pay
                </MudButton>
                <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
            </div>
        </MudPopover>
        <MudPopover Open="@IsSpin" Class="px-4 pt-4" Style="padding: 10px; z-index:10;" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
            <div class=@(IsSpin ? "spinner-border spinner-border-sm mr-1" : "") style="height: 5vh; width: 5vh; border-radius: 50%;">
            </div>
        </MudPopover>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    Models.CreateShipment shipmentModel = new();
    GlobalResponse createShipmentResponse = new();
    private bool loading;
    [Inject] ISnackbar Snackbar { get; set; }
    List<ProductType> productTypeList = new List<ProductType>();
    List<ContainerType> containerTypeList = new List<ContainerType>();
    //List<Checkpoints> checkpointsList = new List<Checkpoints>();
    List<Checkpoints> originList = new List<Checkpoints>();
    List<Checkpoints> destList = new List<Checkpoints>();

    Guid productTypeId;
    Guid containerTypeId;
    Guid origin = Guid.Empty;
    Guid destination = Guid.Empty;

    decimal weight;
    string notes = string.Empty;
    public bool _isOpen = false;
    private bool IsSpin = false;

    public float cost = 0;

    static string paymentId = "";
    static string orderId = "";
    static string signature = "";
    static CreateShipment _createShipment;

    string searchOrigin = "";
    string searchDest = "";
    string searchProductType = "";
    string searchContainerType = "";

    public async Task Calculate()
    {
        loading = true;
        IsSpin = true;
        StateHasChanged();
        shipmentModel.origin = origin;
        shipmentModel.destination = destination;
        shipmentModel.productTypeId = productTypeId;
        shipmentModel.containerTypeId = containerTypeId;
        try
        {
            GlobalResponse response = await _apiService.GetCost(shipmentModel);
            if (response.isSuccess == false)
            {
                Snackbar.Add(response.message, Severity.Error);
            }
            cost = JsonSerializer.Deserialize<float>(JsonSerializer.Serialize(response.data));
            IsSpin = false;
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            IsSpin = false;
            StateHasChanged();
            return;
        }
    }

    public async void ToggleOpen()
    {
        destination = destList.Where(s => s.checkpointName == searchDest).Select(s=>s.checkpointId).FirstOrDefault();
        origin = destList.Where(s => s.checkpointName == searchOrigin).Select(s=>s.checkpointId).FirstOrDefault();
        productTypeId = productTypeList.Where(s => s.type == searchProductType).Select(s=>s.productTypeId).FirstOrDefault();
        containerTypeId = containerTypeList.Where(s => s.containerName == searchContainerType).Select(s=>s.containerTypeId).FirstOrDefault();

        if (origin == destination)
        {
            Snackbar.Add("Origin and Destination can't be same", Severity.Error);
            loading = false;
            return;
        }
        if (_isOpen)
        {
            _isOpen = false;
            IsSpin = false;
        }
        else
        {
            Calculate();
            _isOpen = true;
        }

        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        HubConnection hub = socket.GetHubConnection();
        if (hub == null)
        {
            await socket.Connect();
        }
        hub = socket.GetHubConnection();

        GlobalResponse productTypes = await _apiService.GetProductTypes();
        var obj = JsonSerializer.Serialize(productTypes.data);
        productTypeList = JsonSerializer.Deserialize<List<ProductType>>(obj);

        GlobalResponse containerTypes = await _apiService.GetContainerTypes();
        obj = JsonSerializer.Serialize(containerTypes.data);
        containerTypeList = JsonSerializer.Deserialize<List<ContainerType>>(obj);

        GlobalResponse res = await _apiService.GetCheckpoints();
        obj = JsonSerializer.Serialize(res.data);
        //checkpointsList = JsonSerializer.Deserialize<List<Checkpoints>>(obj);
        originList = JsonSerializer.Deserialize<List<Checkpoints>>(obj);
        //originList = checkpointsList;
        destList = originList;
        _createShipment = this;
        StateHasChanged();
    }

    async void CreateOrder()
    {
        loading = true;
        try
        {
            GlobalResponse res = await _apiService.CreateOrder((int)(1.18 * cost));
            GetYourselfResponse userResponse = await _apiService.GetYourself();

            if (res.statusCode == 401)
            {
                _navMgr.NavigateTo("/logout");
                return;
            }
            if (res.statusCode == 200)
            {
                //invoke js code to start razorpay popup of payment
                //res.data
                await jsRuntime.InvokeAsync<object>("createOrder", userResponse.data.firstName + userResponse.data.lastName, userResponse.data.email, userResponse.data.contactNo, userResponse.data.address, res.data);
            }
            else
            {
                Snackbar.Add(createShipmentResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            Console.WriteLine(ex.Data.ToString());
            loading = false;
            StateHasChanged();
        }
    }

    //this method is invoked after successful payment
    [JSInvokable]
    public static async void VerifyResponseRazorpay(string _paymentId, string _orderId, string _signature)
    {
        Console.WriteLine(_paymentId + _orderId + _signature);
        //CreateShipment s = new();
        paymentId = _paymentId;
        orderId = _orderId;
        signature = _signature;
        await _createShipment.VerifyPayment();
    }

    async Task VerifyPayment()
    {
        try
        {
            //Console.WriteLine("func called verify payment" + paymentId + orderId + signature);
            GlobalResponse response = await _apiService.VerifyPayment(paymentId, orderId, signature);
            var obj = JsonSerializer.Serialize(response.data);
            var result = JsonSerializer.Deserialize<TransactionRecords>(obj);
            if (response.statusCode == 200)
            {
                //Console.WriteLine(res);
                Snackbar.Add(response.message, Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                shipmentModel.transactionRecordId = result.transactionRecordsId;
                await DoCreateShipment();
            }
            else
            {
                Snackbar.Add(createShipmentResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            Console.WriteLine(ex.StackTrace.ToString());
            loading = false;
            StateHasChanged();
        }
    }

    async Task DoCreateShipment()
    {
        loading = true;
        shipmentModel.origin = origin;
        shipmentModel.destination = destination;
        shipmentModel.productTypeId = productTypeId;
        shipmentModel.containerTypeId = containerTypeId;
        try
        {
            createShipmentResponse = await _apiService.CreateShipment(shipmentModel);
            
            if (createShipmentResponse.statusCode == 401)
            {
                _navMgr.NavigateTo("/logout");
                return;
            }
            if (createShipmentResponse.statusCode == 200)
            {
                Snackbar.Add("Shipment Queued Successfully", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                _navMgr.NavigateTo("/customerGetShipments");
            }
            else
            {
                Snackbar.Add(createShipmentResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }

    @*void OriginClicked(ChangeEventArgs originEvent)
    {
        //Checkpoints? temp = checkpointsList.Where(s => s.checkpointId == new Guid(originEvent.Value!.ToString()!)).FirstOrDefault();
        //destList = checkpointsList;
        //destList.Remove(temp);
        origin = new Guid(originEvent.Value.ToString());
        this.StateHasChanged();
    }*@

    @*void DestinationClicked(ChangeEventArgs destEvent)
    {
        //Checkpoints? temp = checkpointsList.Where(s => s.checkpointId == new Guid(destEvent.Value!.ToString()!)).FirstOrDefault();
        //originList = checkpointsList;
        //originList.Remove(temp);
        Console.WriteLine(destEvent.Value);
        destination = new Guid(destEvent.Value.ToString());
        this.StateHasChanged();
    }*@
    @*void DestinationClicked(Guid destId)
    {
        //Checkpoints? temp = checkpointsList.Where(s => s.checkpointId == new Guid(destEvent.Value!.ToString()!)).FirstOrDefault();
        //originList = checkpointsList;
        //originList.Remove(temp);
        //Console.WriteLine(destEvent.Value);
        destination = destId;
        this.StateHasChanged();
    }*@

    @*void ProductTypeClicked(ChangeEventArgs productTypeEvent)
    {
        //productTypeList.Clear();
        productTypeId = new Guid(productTypeEvent.Value.ToString());
        this.StateHasChanged();
    }

    void ContainerTypeClicked(ChangeEventArgs containerTypeEvent)
    {
        //containerTypeList.Clear();
        containerTypeId = new Guid(containerTypeEvent.Value.ToString());
        this.StateHasChanged();
    }*@
}
