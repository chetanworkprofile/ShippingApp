@*@page "/createShipment"
@using ShippingClient.Models;
@using ShippingClient.Services.Contracts;
@inject IAuthenticationService _authService;
@inject NavigationManager _navMgr;
@inject IAlertService AlertService

<div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
    <h4 class="card-header">Create Shipment</h4>
    <div class="card-body">
        <EditForm Model="@loginModel" OnValidSubmit="DoLogin">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText class="form-control" @bind-Value="loginModel.email" />
                <ValidationMessage For="@(()=>loginModel.email)" />
            </div>

            <div class="form-group">
                <label for="Password">Password</label>
                <InputText type="password" class="form-control" @bind-Value="loginModel.password" />
                <ValidationMessage For="@(()=>loginModel.password)" />
            </div>

            <div class="my-2">
                @loginResponse.message
            </div>

            <div class="my-2">
                <button disabled="@loading" type="submit" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                        Task.Delay(5000);
                        loading = false;
                    }
                    Login
                </button>
            </div>
            <p>Don't have a account?</p><NavLink href="/register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div>


@code {
    LoginDTO loginModel = new();
    LoginResponse loginResponse = new();
    private bool loading;

    async Task DoLogin()
    {
        // reset alerts on submit
        AlertService.Clear();
        loading = true;
        try
        {
            loginResponse.message = "Wait....";
            loginResponse = await _authService.Login(loginModel);
            if (loginResponse.statusCode == 1)
            {
                AlertService.Success("Login successful", keepAfterRouteChange: true);
                _navMgr.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}*@