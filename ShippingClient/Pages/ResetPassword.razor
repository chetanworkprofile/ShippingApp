@page "/resetPassword"

<PageTitle>Shipment App</PageTitle>
@*@attribute [Authorize(Roles = "resetPassword")]*@
@*<AuthorizeView>
    <Authorized Context="auth">*@
        <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
            <h4 class="card-header">Reset Password</h4>
            <div class="card-body">
                <EditForm Model="resetDTO" OnValidSubmit="DoReset">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="otp">OTP</label>
                        <InputNumber class="form-control" @bind-Value="resetDTO.otp" required />
                        <ValidationMessage For="@(()=>resetDTO.otp)" />
                    </div>
                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="resetDTO.password" required />
                        <ValidationMessage For="@(()=>resetDTO.password)" />
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Confirm Password</label>
                        <InputText id="confirmPassword" type="Password" class="form-control" @bind-Value="this.confirmPassword" required />
                        <ValidationMessage For="@(()=> (confirmPassword == this.resetDTO.password))" />
                    </div>

                    <div class="my-2">
                        @resetResponse.message
                    </div>

                    <div class="my-2">
                        <button disabled="@loading" type="submit" class="btn btn-primary">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                Task.Delay(5000);
                                loading = false;
                            }
                            Reset
                        </button>
                    </div>
                    <p>Don't have a account?</p><NavLink href="/register" class="btn btn-link">Register</NavLink>
                    <NavLink href="/login" class="btn btn-link"></NavLink>
                </EditForm>
                <p>Please enter OTP that you received on your e-mail</p>
            </div>
        </div>
@*    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view/edit this content.</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login", true);
        }
    </NotAuthorized>
</AuthorizeView>
*@

@code {
    //LoginDTO loginModel = new();
    ResetPasswordModel resetDTO = new();
    LoginResponse resetResponse = new();
    string confirmPassword = string.Empty;

    private bool loading;

    async Task DoReset()
    {
        Console.WriteLine("entered function doreset");
        // reset alerts on submit
        //AlertService.Clear();
        loading = true;
        try
        {
            resetResponse.message = "Wait....";
            if (resetDTO.password == null || resetDTO.password == "")
            {
                resetResponse.message = "Please fill required fields";
                loading = false;
                return;
            }
            if (confirmPassword != resetDTO.password)
            {
                resetResponse.message = "Password and Confirm Password does not match...";
                loading = false;
                return;
            }
            Console.WriteLine("called function reset");
            resetResponse = await _authService.ResetPassword(resetDTO);
            if (resetResponse.statusCode != 0)
            {
                resetResponse.message = "Password reset successful, redirecting to home page...";
                loading = false;
                StateHasChanged();
                //AlertService.Success("Password reset successful", keepAfterRouteChange: true);
                await Task.Delay(2000);
                _navMgr.NavigateTo("/");
            }
            //else
            //{
            //    resetResponse.message = "Something went wrong. Please Try again later";
            //    loading = false;
            //    StateHasChanged();
            //}
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}