@page "/resetPassword"

<PageTitle>Shipment App</PageTitle>
<div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
    <h4 class="card-header">Reset Password</h4>
    <div class="card-body">
        <EditForm Model="resetDTO" OnValidSubmit="DoReset">
            <DataAnnotationsValidator />
            <MudCard>
                    <MudForm Model="resetDTO" ReadOnly="false" @ref="form" @onkeydown="@HandleKeyDown">
                        <MudCardContent>
                <MudNumericField Label="OTP" HideSpinButtons="true" Required="true" RequiredError="OTP is required!" @bind-Value=resetDTO.otp
                                    ValidationMessage For="@(()=>resetDTO.otp)" />
                            <MudTextField T="string" Label="Password" @bind-Value=resetDTO.password
                                            InputType="InputType.Password" HelperText="Choose a strong password"
                                            ValidationMessage For="@(()=>resetDTO.password)" Required="true"
                                            RequiredError="Password is required!" />
                            <MudTextField Label="Confirm Password" HelperText="Repeat the password" Required="true"
                                @bind-Value="confirmPassword" InputType="InputType.Password" RequiredError="Confirm password is required!" />
                        </MudCardContent>
                        <MudCardActions>
                            <div class="d-flex align-center justify-space-between">
                            <MudButton tabindex="0"  Variant="Variant.Filled" Color="Color.Primary" Class="align-content-center m-lg-2" disabled="@loading" OnClick="DoReset">
                                        @if (loading)
                                    {
                                        Task.Delay(5000);
                                        loading = false;
                                    }
                                    Reset
                                </MudButton>
                                <MudProgressCircular Color="Color.Primary" Indeterminate="loading" />
                            </div>
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Default" Class="align-content-center m-lg-2" disabled="@loading" Href="/login">Login</MudButton>
                        </div>
                        </MudCardActions>
                    </MudForm>
                <MudCardContent>                        
            <div class="row"><p>Don't have a account?</p></div>
            <div class="d-flex align-center"><MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="align-content-center m-lg-2" disabled="@loading" Href="/register">Register</MudButton></div>
            </MudCardContent>
            </MudCard>
        </EditForm>
        <MudAlert Severity="Severity.Normal"><p>Please enter OTP that you received on your e-mail</p></MudAlert>
    </div>
</div>


@code {
    
    ResetPasswordModel resetDTO = new();
    LoginResponse resetResponse = new();
    string confirmPassword = string.Empty;
    MudForm? form;
    [Inject] ISnackbar Snackbar { get; set; }
    private bool loading;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await DoReset();
        }
    }

    async Task DoReset()
    {
        
        Snackbar.Clear();
        loading = true;
        try
        {
            if (resetDTO.password == null || resetDTO.password == "")
            {
                Snackbar.Add("Please Fill All fields", Severity.Error);
                loading = false;
                return;
            }
            if (confirmPassword != resetDTO.password)
            {
                Snackbar.Add("Password and Confirm Password does not match...", Severity.Error);
                loading = false;
                return;
            }
            resetResponse = await _authService.ResetPassword(resetDTO);
            if (resetResponse.statusCode == 200)
            {
                Snackbar.Add(resetResponse.message, Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
                loading = false;
                StateHasChanged();
                await Task.Delay(2000);
                _navMgr.NavigateTo("/");
            }
            else
            {
                Snackbar.Add(resetResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
            
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}



@*<div class="form-group">
        <label for="otp">OTP</label>
        <InputNumber class="form-control" @bind-Value="resetDTO.otp" required />
        <ValidationMessage For="@(()=>resetDTO.otp)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="resetDTO.password" required />
        <ValidationMessage For="@(()=>resetDTO.password)" />
    </div>
    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="Password" class="form-control" @bind-Value="this.confirmPassword" required />
        <ValidationMessage For="@(()=> (confirmPassword == this.resetDTO.password))" />
    </div>

    <div class="my-2">
        @resetResponse.message
    </div>

    <div class="my-2">
        <button disabled="@loading" type="submit" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
                Task.Delay(5000);
                loading = false;
            }
            Reset
        </button>
    </div>
    <p>Don't have a account?</p><NavLink href="/register" class="btn btn-link">Register</NavLink>
    <NavLink href="/login" class="btn btn-link"></NavLink>*@