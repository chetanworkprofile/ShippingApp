@page "/login"
@using System.Text.RegularExpressions

<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>You are already authorized</p>
        @if (true)
        {
            Task.Delay(2000);
            _navMgr.NavigateTo("/");
        }
    </Authorized>
    <NotAuthorized Context="auth">
        <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">
            <h4 class="card-header">Login</h4>
            <div class="card-body">
                <EditForm Model="@loginModel" OnValidSubmit="DoLogin" @onkeydown="@HandleKeyDown">
                    <DataAnnotationsValidator />
                        <MudCard>
                        <MudForm Model="loginModel" @ref=form ReadOnly="false">
                                <MudCardContent>
                                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @bind-Value=loginModel.email
                                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                                    <MudTextField T="string" Label="Password"  @bind-Value=loginModel.password
                                                  InputType="InputType.Password"
                                                  ValidationMessage For="@(()=>loginModel.password)" Required="true"
                                                  RequiredError="Password is required!" />
                                </MudCardContent>
                                <MudCardActions>
                                    <div class="d-flex align-center justify-space-between">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="align-content-center m-lg-2" disabled="@loading" @onkeydown="@HandleKeyDown" OnClick="DoLogin">
                                             @if (loading)
                                            {
                                                Task.Delay(5000);
                                                loading = false;
                                            }
                                            Login
                                        </MudButton>
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="loading" />
                                    </div>
                                <div class="d-flex align-center">
                                    <MudButton Variant="Variant.Filled" Color="Color.Default" Class="align-content-center m-lg-2" disabled="@loading" Href="/forgetPassword">Forget Password</MudButton>
                                </div>
                                </MudCardActions>
                            </MudForm>
                        <MudCardContent>                        
                    <div class="row"><p>Don't have a account?</p></div>
                    <div class="d-flex align-center"><MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="align-content-center m-lg-2" disabled="@loading" Href="/register">Register</MudButton></div>
                    </MudCardContent>
                    </MudCard>
                </EditForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>



@code {
    MudForm? form;
    LoginDTO loginModel = new();
    LoginResponse loginResponse = new();
    [Inject] ISnackbar Snackbar { get; set; }
    private bool loading;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        Snackbar.Clear();
        
        if (e.Key == "Enter")
        {
            await DoLogin();
        }
    }

    async Task DoLogin()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Please Fill All fields", Severity.Error);
            return;
        }
        
        Snackbar.Clear();
        loading = true;
        try
        {
            loginResponse = await _authService.Login(loginModel);
            Snackbar.Add(loginResponse.message, Severity.Normal);
            if (loginResponse.statusCode != 200)
            {
                Snackbar.Add(loginResponse.message, Severity.Success);
                await Task.Delay(1000);
                _navMgr.NavigateTo("/", true);
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}







@*<div class="form-group">
    <label for="email">Email</label>
    <InputText class="form-control" @bind-Value="loginModel.email"/>
    <ValidationMessage For="@(()=>loginModel.email)"/>
</div>

<div class="form-group">
    <label for="Password">Password</label>
    <InputText type="password" class="form-control" @bind-Value="loginModel.password" />
    <ValidationMessage For="@(()=>loginModel.password)" />
</div>

<div class="my-2">
    @loginResponse.message
</div>

<div class="my-2">
    <button disabled="@loading" type="submit" class="btn btn-primary">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
            Task.Delay(5000);
            loading = false;
        }
        Login
    </button>
</div>*@