@page "/addContainerType"

@attribute [Authorize(Roles = "admin")]
<PageTitle>Shipment App</PageTitle>

<AuthorizeView>
    <Authorized Context="auth">
       @* <div class="card col-sm-6" style="margin: 10% auto; justify-content:center">*@
            <h4 class="card-header">Add New Container Type</h4>
            <div class="card-body">
            <EditForm Model="containerTypeModel" OnSubmit="DoAddContainerType" @onkeyup="@HandleKeyDown">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="name">Container Type Name</label>
                        <InputText name="name" class="form-control"  @bind-Value="containerTypeModel.containerName"/>
                        <ValidationMessage For="@(()=>containerTypeModel.containerName)"/>
                    </div>
                    <div class="form-group">
                        <label for="price">Price (per kg)</label>
                        <InputNumber id="price" class="form-control" @bind-Value="containerTypeModel.price" />
                        <ValidationMessage For="@(()=>containerTypeModel.price)" />
                    </div>

                    <div class="my-2">
                        <button disabled="@loading" type="submit" class="btn btn-primary">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                Task.Delay(5000);
                                loading = false;
                            }
                            Add
                        </button>
                    </div>
                </EditForm>
            </div>
        @*</div>*@
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
        @if (true)
        {
            _navMgr.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    Models.AddContainerType containerTypeModel = new();
    GlobalResponse addContainerTypeResponse = new();
    private bool loading;
    [Inject] ISnackbar Snackbar { get; set; }


    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        Snackbar.Clear();
        
        if (e.Key == "Enter")
        {
            await DoAddContainerType();
        }
    }
    
    async Task DoAddContainerType()
    {
        loading = true;

        try
        {
            addContainerTypeResponse = await _apiService.AddContainerType(containerTypeModel);
            if (addContainerTypeResponse.statusCode == 401)
            {
                _navMgr.NavigateTo("/logout");
                return;
            }
            if (addContainerTypeResponse.statusCode == 200)
            {
                Snackbar.Add("Container Type Added Successfully", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.Done;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
            else
            {
                Snackbar.Add(addContainerTypeResponse.message, Severity.Error, config =>
                {
                    config.Icon = Icons.Material.Filled.Error;
                    config.IconColor = Color.Warning;
                    config.IconSize = Size.Small;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            loading = false;
            StateHasChanged();
        }
    }
}
